<apex:page controller="FL_RegisterFlosumOrgController" sidebar="false" action="{!checkAuthentication}">
    <apex:includeScript value="{!URLFOR($Resource.FL_jquery)}"/>
    <apex:includeScript value="{!URLFOR($Resource.FL_FlosumJS,'jszip-master/flosumsf/flosumsf1.6.3.js')}"/> 
    <c:FL_Wait />
    <apex:pagemessages id="msg_cred"/>
    <apex:form >
        <apex:pageBlock title="OAuth Authentication Details">
            <apex:pageBlockbuttons location="top">
                <apex:commandbutton value="Save" action="{!Save}"/>
                <apex:commandbutton value="Cancel" immediate="true" action="{!cancel}"/>
            </apex:pageBlockbuttons>
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                   <apex:outputlabel value="{!$ObjectType.FL_Credentials__c.fields.ConsumerKey__c.Label}" />
                   <apex:inputField value="{!creds.ConsumerKey__c}" required="true" />
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem >
                   <apex:outputlabel value="{!$ObjectType.FL_Credentials__c.fields.ConsumerSecret__c.Label}" />
                   <apex:inputsecret value="{!creds.ConsumerSecret__c}" required="true"/>
               </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
        </apex:pageBlock>  
    </apex:form>
    <apex:form > 
        <apex:pageBlock title="Register Flosum Org" id="registerBlock" rendered="{!creds.Id != null}">
            <apex:pageBlockSection id="creds" rendered="true" columns="1">
               <apex:pageBlockSectionItem >
                   <apex:outputlabel value="Username" />
                   <apex:inputText value="{!userName}" />
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem >
                   <apex:outputlabel value="Organisation Type" />
                    <apex:selectList value="{!selectedhostType}" styleClass="RemoveNone" onchange="show();checkGovtOrg();" multiselect="false" size="1">
                        <apex:selectOptions value="{!hostOptions}"/>
                    </apex:selectList>
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem rendered="{!If(selectedhostType == 'Government cloud org',true,false)}">
                    <apex:outputlabel value="Host Name" />
                    <apex:inputText value="{!hostUrl}"/>
               </apex:pageBlockSectionItem>
               <apex:pageBlockSectionItem id="passBlock">
                   <apex:outputlabel value="Authorization Code" />
                   <apex:inputsecret value="{!password}" styleclass="pkp" redisplay="true"/>   
               </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:pageBlockButtons location="bottom">      
                <apex:commandbutton value="Authorize" onclick="auth(); return false;"/>
                <apex:commandbutton action="{!cancel}" value="Cancel" />
            </apex:pageBlockButtons>
        </apex:pageBlock>
        <apex:pageBlock title="Register a Branch" id="registerBranchBlock" rendered="{!isAuthSuccessful}">
            <apex:pageBlockSection >
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value=""/>
                    <apex:selectList value="{!selectedBranch}" multiselect="false" size="1">
                        <apex:selectOptions value="{!branchOptions}"/>
                    </apex:selectList>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:pageBlockButtons location="bottom">      
                <apex:commandbutton value="Save" action="{!saveBranch}" reRender="msg_cred"/>
            </apex:pageBlockButtons>
        </apex:pageBlock>
        <apex:actionfunction name="checkGovtOrg" rerender="creds,msg_cred,nonevalue" oncomplete="hide();"/>
        <apex:actionfunction name="checkAndSave" action="{!checkAndSave}" rerender="registerBlock,msg_cred" oncomplete="afterSave('{!remoteSiteSettingURL}','{!PlaceOfException}');"/>
        <apex:actionfunction name="authorize" action="{!processLogin}" oncomplete="promptLink('{!JSENCODE(loginUrl)}');" rerender="msg_cred,nonevalue"></apex:actionfunction>
        <apex:actionfunction name="completeRegisterOrg" action="{!completeRegisterOrg}" oncomplete="hide();" rerender="msg_cred"></apex:actionfunction>
    </apex:form>
    <script>
        var flosumsf = jsforce;
        function promptLink(linkUrl){
            if(linkUrl != '')
            {
                prompt('Copy the following link and open in other browser or in incognito mode to get autorization code', linkUrl);
            }
        }
        
        function auth() {
            if($(".pkp").val() == '') {
                authorize();
            } else {
                show();
                checkAndSave();
            }
            return false;
        }
        
        function afterSave(remoteSiteSettingURL,placeOfEX)
            {
                console.log(remoteSiteSettingURL);
                console.log(placeOfEX);
                if(remoteSiteSettingURL != '' && (placeOfEX == 'ID' || placeOfEX == 'AUTHORIZATION'))
                {
                    listRemoteSiteSetting(remoteSiteSettingURL,placeOfEX);
                }
                else
                    hide();
            }
            
            function listRemoteSiteSetting(RSURL,placeOfEX)
            {
                var reg = /[^a-zA-Z0-9]+/g
                var host = RSURL;
                var fullName = RSURL.slice(8,RSURL.indexOf('.salesforce.com'));
                fullName = fullName.replace(reg,'');
                var ExistingNames = {};
                var selfConn = new flosumsf.Connection({ accessToken: '{!$Api.Session_Id}' });
                var queryLi = [];
                var query = new Object();
                query.folder = '';
                query.type = 'RemoteSiteSetting';
                queryLi.push(query);
                console.log(ExistingNames);
                selfConn.metadata.list(queryLi, '34.0', function(err,result){
                    if(err) 
                    {
                        console.log(err);
                    }
                    else
                    {
                        if(Array.isArray(result))
                        {
                            for(var index in result)
                            {
                                if(index < result.length)
                                {
                                    var mi = result[index];
                                    ExistingNames[mi.fullName]= mi.fullName;
                                }
                            }
                        }
                        else
                        {
                            if(result != undefined && result.fullName != undefined)
                                ExistingNames[result.fullName]= result.fullName;
                        }
                        var remoteSite = new Object();
                        remoteSite.fullName = ExistingNames[fullName] != undefined ?  getRemoteSiteName(fullName+'1',ExistingNames) : fullName;
                        remoteSite.description = 'Metadata API Remote Site Setting for Flosum Application';
                        remoteSite.isActive = true;
                        remoteSite.url = host;
                        selfConn.metadata.create('RemoteSiteSetting',remoteSite,function(err2,result2){
                            if(err2) 
                            {
                                console.log(err2);
                                hide();
                            }
                            else
                            {
                                if(result2 != undefined && result2.success)
                                {
                                    if(placeOfEX == 'AUTHORIZATION')
                                    {
                                        checkAndSave();
                                    }
                                    else if(placeOfEX == 'ID')
                                    {
                                        completeRegisterOrg();
                                    }
                                    else
                                    {
                                        hide();
                                    }
                                }
                                else
                                {
                                    console.log(JSON.stringify(result2.errors));
                                    hide();
                                }
                            }
                        });
                    }
                });
            }
            
            function getRemoteSiteName(fullName,ExistingNames)
            {
                if(ExistingNames[fullName] != undefined)
                {
                    fullName = calculateName(fullName);
                    return getRemoteSiteName(fullName,ExistingNames);
                }
                else
                {
                    return fullName;
                }
            }
            
            function calculateName(input)
            {
                var result = input;
                var i = input.length;
                var last = input.charAt(--i);
                if(isNaN(last))
                {
                    return result+'1';
                }
                else
                {
                    last = parseInt(last) + 1;
                    result = result.slice(0,result.length - 1);
                    return result  + ''+last ;
                }
            }
    </script>
</apex:page>